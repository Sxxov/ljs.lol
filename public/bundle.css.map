{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\App.svelte",
    "..\\AppBar.svelte",
    "..\\Button.svelte",
    "..\\Card.svelte",
    "..\\Dialog.svelte",
    "..\\Hamburger.svelte",
    "..\\Hint.svelte",
    "..\\Input.svelte",
    "..\\Logo.svelte",
    "..\\Lottie.svelte",
    "..\\Navigator.svelte",
    "..\\Scene.svelte",
    "..\\Spacer.svelte",
    "..\\HamburgerAppBar.svelte",
    "..\\NavigatorAppBar.svelte",
    "..\\SvgButton.svelte",
    "..\\ConfirmDialog.svelte",
    "..\\InputDialog.svelte",
    "..\\OkDialog.svelte",
    "..\\AppBarScene.svelte",
    "..\\Collage.svelte",
    "..\\Terminal.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport Router from 'svelte-spa-router';\r\n\timport { wrap } from 'svelte-spa-router/wrap';\r\n\timport { navigatorAppBarScrolledHeight, navigatorAppBarBaseHeight } from './resources/stores';\r\n\timport LandingScene from './ui/scenes/LandingScene.svelte';\r\n\timport strings from './resources/strings';\r\n\timport { Compatibler } from './core/compatibler';\r\n\timport RenderScene from './ui/scenes/RenderScene.svelte';\r\n\timport { ScrollUtility } from './resources/utilities';\r\n\timport NavigatorAppBar from './ui/blocks/appBars/NavigatorAppBar.svelte';\r\n\r\n\tCompatibler.throw(Compatibler.test());\r\n\r\n\tlet mainDomContent = null;\r\n\tlet scrolledHeightWritable = writable(0);\r\n\tlet baseHeightWritable = writable(0);\r\n\r\n\t$: navigatorAppBarScrolledHeight.set($scrolledHeightWritable);\r\n\t$: navigatorAppBarBaseHeight.set($baseHeightWritable);\r\n\r\n\t// const GlobalProps = {\r\n\t// \tappBarScrolledHeightWritable,\r\n\t// \tappBarBaseHeightWritable,\r\n\t// };\r\n\tconst Paths = [\r\n\t\t'/',\r\n\t\t'/about',\r\n\t\t'/contact',\r\n\t\t'/portfolio',\r\n\t];\r\n\tconst Routes = {\r\n\t\t[Paths[0]]: LandingScene,\r\n\t\t[Paths[1]]: RenderScene,\r\n\t\t[Paths[2]]: RenderScene,\r\n\t\t[Paths[3]]: RenderScene,\r\n\t};\r\n\twindow.RouteNames = {\r\n\t\t[Paths[0]]: strings.common.routes.info.HOME,\r\n\t\t[Paths[1]]: strings.common.routes.info.ABOUT,\r\n\t\t[Paths[2]]: strings.common.routes.info.CONTACT,\r\n\t\t[Paths[3]]: strings.common.routes.info.PORTFOLIO,\r\n\t};\r\n\tconst { RouteNames } = window;\r\n\r\n\tonMount(() => {\r\n\t\tScrollUtility.target = mainDomContent;\r\n\t});\r\n\r\n\t// const compiledRoutes = (() => {\r\n\t// \tconst result = {};\r\n\r\n\t// \tObject.keys(Routes).forEach((routeKey) => {\r\n\t// \t\tconst routeValue = Routes[routeKey];\r\n\r\n\t// \t\tresult[routeKey] = wrap({\r\n\t// \t\t\tcomponent: routeValue,\r\n\t// \t\t\tprops: GlobalProps,\r\n\t// \t\t});\r\n\t// \t});\r\n\r\n\t// \treturn result;\r\n\t// })();\r\n</script>\r\n\r\n<main\r\n\tbind:this={mainDomContent}\r\n>\r\n\t<NavigatorAppBar\r\n\t\tbind:scrolledHeightWritable\r\n\t\tbind:baseHeightWritable\r\n\t\troutes={RouteNames}\r\n\t/>\r\n\t<Router\r\n\t\troutes={Routes}\r\n\t/>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\theight: 100%;\r\n\t\tbackground: var(--colour-background-primary);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { onMount, onDestroy } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport Logo from './Logo.svelte';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\timport Spacer from './Spacer.svelte';\r\n\timport { dropIn as dropInRaw, dropOut as dropOutRaw, noop } from '../../core/transitioner';\r\n\r\n\t// @export\r\n\texport const baseHeightWritable = writable(0);\r\n\texport let computedPaddingWritable = writable(0);\r\n\r\n\texport let title = null;\r\n\texport let appBarPadding = '--padding';\r\n\texport let appBarPaddingWritable = writable(appBarPadding);\r\n\texport let contentPadding = 0;\r\n\texport let contentPaddingWritable = writable(contentPadding);\r\n\texport let isInAnimated = false;\r\n\texport let isOutAnimated = false;\r\n\r\n\tconst dropIn = isInAnimated ? dropInRaw : noop;\r\n\tconst dropOut = isOutAnimated ? dropOutRaw : noop;\r\n\r\n\tlet appBarContainerDomContent = null;\r\n\tlet appBarContainerDomContentComputedStyle = {};\r\n\r\n\tonMount(() => {\r\n\t\tonResize();\r\n\r\n\t\twindow.addEventListener(\r\n\t\t\t'resize',\r\n\t\t\tonResize,\r\n\t\t);\r\n\t});\r\n\r\n\tonDestroy(() => {\r\n\t\twindow.removeEventListener(\r\n\t\t\t'resize',\r\n\t\t\tonResize,\r\n\t\t);\r\n\t});\r\n\r\n\tfunction onResize() {\r\n\t\tappBarContainerDomContentComputedStyle = getComputedStyle(appBarContainerDomContent);\r\n\r\n\t\tcomputedPaddingWritable.set(\r\n\t\t\tNumber.parseFloat(\r\n\t\t\t\tappBarContainerDomContentComputedStyle.paddingLeft,\r\n\t\t\t),\r\n\t\t);\r\n\t\tbaseHeightWritable.set(\r\n\t\t\tNumber.parseFloat(\r\n\t\t\t\tappBarContainerDomContentComputedStyle.height,\r\n\t\t\t)\r\n\t\t\t+ $computedPaddingWritable * 2,\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<component>\r\n\t<container\r\n\t\tclass='app-bar'\r\n\t\tbind:this={appBarContainerDomContent}\r\n\t\tstyle='\r\n\t\t\t--app-bar-padding: {CSSUtility.parse($appBarPaddingWritable)};\r\n\t\t\t--content-padding: {CSSUtility.parse($contentPaddingWritable)};\r\n\t\t'\r\n\t\tin:dropIn\r\n\t\tout:dropOut\r\n\t>\r\n\t\t<container\r\n\t\t\tclass='content left'\r\n\t\t>\r\n\t\t\t{#if !title}\r\n\t\t\t\t<container class='logo'>\r\n\t\t\t\t\t<Logo />\r\n\t\t\t\t</container>\r\n\t\t\t{:else}\r\n\t\t\t\t<heading>{title}</heading>\r\n\t\t\t{/if}\r\n\t\t</container>\r\n\r\n\t\t<container \r\n\t\t\tclass='content right'\r\n\t\t>\r\n\t\t\t<slot></slot>\r\n\t\t</container>\r\n\t</container>\r\n\r\n\t<Spacer\r\n\t\theightWritable={baseHeightWritable}\r\n\t/>\r\n</component>\r\n\r\n<style>\r\n\tcontainer.app-bar {\r\n\t\tpadding: var(--app-bar-padding);\r\n\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\twidth: calc(100% - var(--padding) * 2);\r\n\t\tz-index: 100;\r\n\r\n\t\theight: auto;\r\n\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: min-content auto;\r\n\t\tgrid-template-rows: auto;\r\n\r\n\t\tbackground: var(--colour-background-secondary);\r\n\t}\r\n\r\n\tcontainer.content.right {\r\n\t\tjustify-self: right;\r\n\t}\r\n\r\n\tcontainer.content {\r\n\t\tpadding: var(--content-padding);\r\n\t}\r\n\r\n\tcontainer.logo {\r\n\t\tpadding: 0.5rem 0;\r\n\t}\r\n\r\n\theading {\r\n\t\tfont-size: 1.5rem;\r\n\t\tline-height: 3rem;\r\n\t}\r\n</style>",
    "<script>\r\n\timport {\r\n\t\tonMount,\r\n\t\tcreateEventDispatcher,\r\n\t} from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport { Shadow } from '../../core/shadow';\r\n\timport Ripple from './Ripple.svelte';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\r\n\texport let backgroundColour = '--colour-accent-primary';\r\n\texport let hoverColour = '--colour-accent-secondary';\r\n\texport let rippleColour = 'white';\r\n\texport let textColour = '--colour-text-primary';\r\n\texport let icon = 'done';\r\n\texport let iconSize = '1rem';\r\n\texport let width = 'max-content';\r\n\texport let roundness = '--roundness';\r\n\texport let height = 'max(calc(var(--border-radius) * 2), 56px)';\r\n\texport let depth = 1;\r\n\texport let isText = true;\r\n\texport let textAlign = 'center';\r\n\texport let padding = '16px max(var(--border-radius), 24px)';\r\n\r\n\tconst speed = 1000;\r\n\tconst sizeIn = 20;\r\n\tconst opacityIn = 0.2;\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tconst ripples = (() => {\r\n\t\tconst arrayWritable = writable([]);\r\n\t\treturn {\r\n\t\t\t...arrayWritable,\r\n\t\t\tadd: (item) => arrayWritable.update((items) => [...items, item]),\r\n\t\t\tclear: () => arrayWritable.update(() => []),\r\n\t\t};\r\n\t})();\r\n\r\n\tlet componentDomContent;\r\n\tconst self = {\r\n\t\tdomContent: null,\r\n\t\tget width() {\r\n\t\t\treturn +!!self.domContent && self.domContent.offsetWidth;\r\n\t\t},\r\n\t\tget height() {\r\n\t\t\treturn +!!self.domContent && self.domContent.offsetHeight;\r\n\t\t},\r\n\t\tget x() {\r\n\t\t\treturn +!!self.domContent && self.domContent.getBoundingClientRect().x;\r\n\t\t},\r\n\t\tget y() {\r\n\t\t\treturn +!!self.domContent && self.domContent.getBoundingClientRect().y;\r\n\t\t},\r\n\t};\r\n\r\n\tonMount(() => {\r\n\t\tShadow.apply(-depth, self.domContent);\r\n\t\tShadow.apply(depth, componentDomContent);\r\n\t});\r\n\r\n\tconst coords = { x: 50, y: 50 };\r\n\r\n\t$: offsetX = Math.abs((self.width / 2) - coords.x);\r\n\t$: offsetY = Math.abs((self.height / 2) - coords.y);\r\n\t$: deltaX = (self.width / 2) + offsetX;\r\n\t$: deltaY = (self.height / 2) + offsetY;\r\n\t$: scaleRatio = Math.sqrt((deltaX ** 3) + (deltaY ** 3));\r\n\t\r\n\tlet __touched = false;\r\n\tlet __timer = null;\r\n\tfunction onMouseDown(event, type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase 'touch': {\r\n\t\t\t\t__touched = true;\r\n\t\t\t\tripples.add({\r\n\t\t\t\t\tx: event.pageX - self.x,\r\n\t\t\t\t\ty: event.pageY - self.y,\r\n\t\t\t\t\tsize: scaleRatio,\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'click': {\r\n\t\t\t\tif (__touched) {\r\n\t\t\t\t\t__touched = false;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tripples.add({\r\n\t\t\t\t\tx: event.clientX - self.x,\r\n\t\t\t\t\ty: event.clientY - self.y,\r\n\t\t\t\t\tsize: scaleRatio,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tclearTimeout(__timer);\r\n\t\t__timer = setTimeout(() => {\r\n\t\t\tripples.clear();\r\n\t\t}, speed + (speed * 2));\r\n\r\n\t\tif (!event.currentTarget) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent\r\n\t\t\t.currentTarget\r\n\t\t\t.parentElement\r\n\t\t\t.classList\r\n\t\t\t.remove('unpressed');\r\n\t}\r\n\r\n\tfunction onMouseUp(event) {\r\n\t\tif (!event.currentTarget) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevent\r\n\t\t\t.currentTarget\r\n\t\t\t.parentElement\r\n\t\t\t.classList\r\n\t\t\t.add('unpressed');\r\n\t}\r\n</script>\r\n\r\n<component\r\n\tclass='unpressed'\r\n\tbind:this={componentDomContent}\r\n\tstyle='\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--border-radius: {CSSUtility.parse(roundness)};\r\n\t'\r\n>\r\n\t<button\r\n\t\tbind:this={self.domContent}\r\n\t\tstyle='\r\n\t\t\t--colour-background: {CSSUtility.parse(backgroundColour)};\r\n\t\t\t--colour-hover: {CSSUtility.parse(hoverColour)};\r\n\t\t\t--colour-ripple: {CSSUtility.parse(rippleColour)};\r\n\t\t\t--colour-text: {CSSUtility.parse(textColour)};\r\n\t\t\t--button-padding: {CSSUtility.parse(padding)};\r\n\t\t\t--icon-size: {CSSUtility.parse(iconSize)};\r\n\t\t\t--text-align: {textAlign};\r\n\t\t'\r\n\t\ton:click={() => dispatch('click')}\r\n\t\ton:focus={(event) => event.currentTarget.parentElement.classList.remove('unpressed')}\r\n\t\ton:blur={(event) => event.currentTarget.parentElement.classList.add('unpressed')}\r\n\t\ton:touchstart|passive={(event) => onMouseDown(event.touches[0], 'touch')}  \r\n\t\ton:mousedown={(event) => onMouseDown(event, 'click')}\r\n\t\ton:touchend|passive={(event) => onMouseUp(event)}\r\n\t\ton:mouseup={(event) => onMouseUp(event)}\r\n\t>\r\n\t\t<span class='content'>\r\n\t\t\t{#if isText}\r\n\t\t\t\t<icon>\r\n\t\t\t\t\t{icon}\r\n\t\t\t\t</icon>\r\n\t\t\t\t<string>\r\n\t\t\t\t\t<slot></slot>\r\n\t\t\t\t</string>\r\n\t\t\t{:else}\r\n\t\t\t\t<slot></slot>\r\n\t\t\t{/if}\r\n\t\t</span>\t\r\n\t\t<svg>\r\n\t\t\t{#each $ripples as ripple}\r\n\t\t\t\t<Ripple \r\n\t\t\t\t\tx='{ripple.x}' \r\n\t\t\t\t\ty='{ripple.y}' \r\n\t\t\t\t\tsize={ripple.size} \r\n\t\t\t\t\t{speed} \r\n\t\t\t\t\t{sizeIn} \r\n\t\t\t\t\t{opacityIn} \r\n\t\t\t\t\tfill={rippleColour}\r\n\t\t\t\t/>\r\n\t\t\t{/each}\r\n\t\t</svg>\r\n\t</button>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\tbox-shadow: var(--shadow);\r\n\r\n\t\ttransform: translateX(0px);\r\n\r\n\t\tborder-radius: var(--border-radius);\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\r\n\tcomponent.unpressed {\r\n\t\tbox-shadow: var(--shadow-inactive);\r\n\t}\r\n\r\n\t/* component:hover {\r\n\t\twidth: calc(var(--width) + 28px);\r\n\t} */\r\n\r\n\tbutton {\r\n\t\t/* for stupid cunts that don't support 'max()'' */\r\n\t\theight: 56px;\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\tbackground: var(--colour-background);\r\n\r\n\t\ttransform: matrix(1, 0, 0, 1, 0, 0);\r\n\t\tpadding: var(--button-padding);\r\n\r\n\t\tborder: 0;\r\n\t\toutline: none;\r\n\t\t-webkit-tap-highlight-color: transparent;\r\n\r\n\t\tcursor: pointer;\r\n\r\n\t\tborder-radius: var(--border-radius);\r\n\r\n\t\tbox-shadow: var(--shadow-inactive);\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\t\r\n\tbutton:hover {\r\n\t\tbackground: var(--colour-hover);\r\n\t}\r\n\r\n\tbutton:active {\r\n\t\tbox-shadow: var(--shadow);\r\n\t}\r\n\r\n\tbutton * {\r\n\t\tcolor: var(--colour-text);\r\n\t}\r\n\r\n\t.content {\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: var(--text-align);\r\n\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t\t/* z-index: 0; */\r\n\t}\r\n\r\n\tstring {\r\n\t\tfont-size: 1rem;\r\n\t\tfont-variation-settings: var(--font-variation-regular);\r\n\r\n\t\tmargin: 0;\r\n\t\tuser-select: none;\r\n\t}\r\n\r\n\tstring:not(:empty) {\r\n\t\tpadding-left: 8px;\r\n\t}\r\n\r\n\ticon:empty ~ string {\r\n\t\tpadding-left: 0;\r\n\t}\r\n\r\n\tsvg {\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\r\n\t\tborder-radius: var(--border-radius);\r\n\r\n\t\tpointer-events: none;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tz-index: 0;\r\n\t}\r\n\r\n\ticon {\r\n\t\tfont-size: var(--icon-size);\r\n\t\tline-height: var(--icon-size);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport { Shadow } from '../../core/shadow';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\timport Scene from './Scene.svelte';\r\n\r\n\texport let depth = 3;\r\n\texport let backgroundColour = '--colour-background-secondary';\r\n\texport let hoverColour = '--colour-accent-primary';\r\n\r\n\texport let roundness = '--roundness';\r\n\r\n\texport let isFloatingInverted = false;\r\n\t\r\n\texport let height = 'auto';\r\n\texport let width = 'auto';\r\n\r\n\texport let heightWritable = writable(height);\r\n\texport let widthWritable = writable(width);\r\n\r\n\tlet componentDomContent = null;\r\n\r\n\tonMount(() => {\r\n\t\tShadow.apply(depth, componentDomContent);\r\n\t});\r\n</script>\r\n\r\n<component\r\n\tbind:this={componentDomContent}\r\n\tstyle='\r\n\t\t--colour-background: {CSSUtility.parse(backgroundColour)};\r\n\t\t--colour-hover: {CSSUtility.parse(hoverColour)};\r\n\t\t--height: {CSSUtility.parse($heightWritable)};\r\n\t\t--width: {CSSUtility.parse($widthWritable)};\r\n\t\t--box-shadow: {isFloatingInverted ? 'var(--shadow)' : 'var(--shadow-inactive)'};\r\n\t\t--active-box-shadow: {isFloatingInverted ? 'var(--shadow-inactive)' : 'var(--shadow)'};\r\n\t\t--card-roundness: {CSSUtility.parse(roundness)};\r\n\t'\r\n>\r\n\t<Scene\r\n\t\tbackgroundColour='transparent'\r\n\t\theight='100%'\r\n\t\twidth='100%'\r\n\t\t{...$$restProps}\r\n\t>\r\n\t\t<slot></slot>\r\n\t</Scene>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tbackground: var(--colour-background);\r\n\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\tborder-radius: var(--card-roundness);\r\n\r\n\t\tbox-shadow: var(--box-shadow);\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\r\n\tcomponent:hover {\r\n\t\tbackground: var(--colour-hover);\r\n\t}\r\n\r\n\tcomponent:active {\r\n\t\tbox-shadow: var(--active-box-shadow);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport { Shadow } from '../../core/shadow';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\timport { fade, dropIn, dropOut } from '../../core/transitioner';\r\n\r\n\texport let depth = 3;\r\n\texport let dismissOnClick = true;\r\n\texport let isActiveWritable = writable(true);\r\n\texport let roundness = '--roundness';\r\n\texport function dismiss() {\r\n\t\tisActiveWritable.set(false);\r\n\t};\r\n\r\n\tlet contentDomContent = null;\r\n\tlet allDomContent = null;\r\n\tlet overlayDomContent = null;\r\n\r\n\t$: contentDomContent && Shadow.apply(depth, contentDomContent);\r\n\t$: allDomContent && allDomContent.addEventListener('dismiss', () => overlayDomContent.click());\r\n</script>\r\n\r\n{#if $isActiveWritable}\r\n\t<component\r\n\t\tin:dropIn\r\n\t\tout:dropOut\r\n\t\tclass={$isActiveWritable ? '' : 'inactive'}\r\n\t\tbind:this={allDomContent}\r\n\t>\r\n\t\t\r\n\t\t\t<overlay\r\n\t\t\t\ttransition:fade\r\n\t\t\t\ton:click={() => dismissOnClick && isActiveWritable.set(false)}\r\n\t\t\t\tbind:this={overlayDomContent}\r\n\t\t\t/>\r\n\t\t\t<container\r\n\t\t\t\tbind:this={contentDomContent}\r\n\t\t\t\tclass='content {$isActiveWritable ? '' : 'inactive'}'\r\n\t\t\t\tstyle='\r\n\t\t\t\t\t--border-radius: {CSSUtility.parse(roundness)};\r\n\t\t\t\t'\r\n\t\t\t>\r\n\t\t\t\t<slot></slot>\r\n\t\t\t</container>\r\n\t</component>\r\n{/if}\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tdisplay: grid;\r\n\t\talign-items: center;\r\n\t\tjustify-items: center;\r\n\r\n\t\tvisibility: visible;\r\n\r\n\t\tposition: fixed;\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tz-index: 1;\r\n\r\n\t\tpointer-events: visible;\r\n\t}\r\n\r\n\tcomponent.inactive {\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\tcontainer.content {\r\n\t\theight: min-content;\r\n\t\twidth: min-content;\r\n\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-rows: 1fr min-content;\r\n\r\n\t\t/* transform: translateY(0px);\r\n\t\topacity: 1;\r\n\t\ttransition: \r\n\t\t\tall 0.3s var(--ease-fast-slow),\r\n\t\t\tmin-height 0s,\r\n\t\t\topacity 0s; */\r\n\r\n\t\ttransform: matrix(1, 0, 0, 1, 0, 0);\r\n\r\n\t\tmin-width: 480px;\r\n\t\tmin-height: 240px;\r\n\r\n\t\toverflow: hidden;\r\n\r\n\t\tz-index: 2;\r\n\r\n\t\tborder-radius: var(--border-radius);\r\n\r\n\t\tbox-shadow: var(--shadow);\r\n\t}\r\n\r\n\tcontainer.content.inactive {\r\n\t\t/* transform: translateY(-20px);\r\n\t\topacity: 0;\r\n\r\n\t\ttransition: \r\n\t\t\tall 0.2s var(--ease-slow-fast),\r\n\t\t\topacity 0.1s 0.1s var(--ease-slow-fast); */\r\n\r\n\t\tbox-shadow: var(--shadow-inactive);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport { fade } from '../../core/transitioner';\r\n\timport LottieToggleButton from './buttons/LottieToggleButton.svelte';\r\n\timport hamburger from '../../raw/lottie/hamburger.json';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\timport Button from './Button.svelte';\r\n\r\n\t// @export\r\n\texport let isActiveWritable = writable(false);\r\n\r\n\t/** @type Record<string, () => void> */\r\n\texport let toppings = null;\r\n\texport let buttonSize = '2rem';\r\n\texport let backgroundColour = '--colour-background-primary';\r\n\texport let menuWidth = 420;\r\n\texport let menuTopOffset = '--padding';\r\n\texport let menuTopOffsetWritable = writable(menuTopOffset);\r\n\r\n\tlet lottieToggleButton = null;\r\n</script>\r\n\r\n{#if toppings}\r\n\t<component\r\n\t\tstyle='\r\n\t\t\t--colour-background: {CSSUtility.parse(backgroundColour)};\r\n\t\t\t--menu-top-offset: {CSSUtility.parse($menuTopOffsetWritable)}\r\n\t\t'\r\n\t>\r\n\t\t<container\r\n\t\t\tclass='button {$isActiveWritable ? 'boosted' : ''}'\r\n\t\t\tstyle='\r\n\t\t\t\t--button-size: {CSSUtility.parse(buttonSize)};\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<LottieToggleButton\r\n\t\t\t\tanimationData={hamburger}\r\n\t\t\t\tbind:this={lottieToggleButton}\r\n\t\t\t\tbind:isActiveWritable\r\n\t\t\t\toverrideColour='--colour-text-primary'\r\n\t\t\t/>\r\n\t\t</container>\r\n\r\n\t\t{#if $isActiveWritable}\r\n\t\t\t<overlay \r\n\t\t\t\ton:click={() => isActiveWritable.set(false)}\r\n\t\t\t\ttransition:fade\r\n\t\t\t/>\r\n\t\t{/if}\r\n\t\t\r\n\t\t<container\r\n\t\t\tclass='menu {$isActiveWritable ? '' : 'inactive'}'\r\n\t\t\tstyle='\r\n\t\t\t\t--width: {CSSUtility.parse(menuWidth)};\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<container\r\n\t\t\t\tclass='content'\r\n\t\t\t>\r\n\t\t\t\t{#each Object.keys(toppings) as toppingKey}\r\n\t\t\t\t\t<container\r\n\t\t\t\t\t\tclass='topping'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ton:click={() => {\r\n\t\t\t\t\t\t\t\tisActiveWritable.set(false);\r\n\r\n\t\t\t\t\t\t\t\ttoppings[toppingKey]();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ticon='arrow_forward'\r\n\t\t\t\t\t\t\tbackgroundColour='--colour-background-primary'\r\n\t\t\t\t\t\t\ttextColour='--colour-accent-primary'\r\n\t\t\t\t\t\t\thoverColour='--colour-background-secondary'\r\n\t\t\t\t\t\t\trippleColour='--colour-accent-primary'\r\n\t\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t\t\theight='100%'\r\n\t\t\t\t\t\t\troundness='0'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{toppingKey}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</container>\r\n\t\t\t\t{/each}\r\n\t\t\t</container>\r\n\t\t</container>\r\n\t</component>\r\n{/if}\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: 100%;\r\n\r\n\t\tdisplay: grid;\r\n\t\talign-items: center;\r\n\t\tjustify-items: center;\r\n\t}\r\n\r\n\tcontainer.button {\r\n\t\tposition: relative;\r\n\r\n\t\twidth: var(--button-size);\r\n\r\n\t\tz-index: 0;\r\n\r\n\t\ttransition: z-index 0s 0.2s;\r\n\t}\r\n\r\n\tcontainer.button.boosted {\r\n\t\tz-index: 3;\r\n\r\n\t\ttransition: unset;\r\n\t}\r\n\r\n\tcontainer.menu {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-rows: 1fr;\r\n\t\tgrid-template-columns: 1fr;\r\n\r\n\t\tjustify-items: center;\r\n\t\talign-items: center;\r\n\r\n\t\tposition: fixed;\r\n\t\ttop: var(--menu-top-offset);\r\n\t\tright: 0;\r\n\r\n\t\theight: calc(100% - var(--menu-top-offset));\r\n\t\twidth: var(--width);\r\n\t\tmax-width: 100%;\r\n\r\n\t\tbackground: var(--colour-background);\r\n\r\n\t\t/* padding: var(--padding); */\r\n\t\tbox-sizing: border-box;\r\n\r\n\t\tz-index: 2;\r\n\r\n\t\ttransform: translateX(0);\r\n\t\topacity: 1;\t\r\n\r\n\t\ttransition: \r\n\t\t\tall 0.4s var(--ease-fast-slow),\r\n\t\t\ttop 0s,\r\n\t\t\theight 0s,\r\n\t\t\topacity 0s;\r\n\t}\r\n\r\n\tcontainer.menu.inactive {\r\n\t\ttransform: translateX(calc(var(--width) / 4));\r\n\t\tpointer-events: none;\r\n\t\topacity: 0;\r\n\t\t\r\n\t\ttransition: \r\n\t\t\tall 0.2s var(--ease-slow-fast),\r\n\t\t\ttop 0s,\r\n\t\t\theight 0s,\r\n\t\t\topacity 0s 0.2s var(--ease-slow-fast);\r\n\t}\r\n\r\n\tcontainer.menu > .content {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: auto;\r\n\t\tgrid-template-rows: auto;\r\n\r\n\t\tjustify-items: center;\r\n\t\talign-items: center;\r\n\r\n\t\t/* gap: 56px; */\r\n\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\toverlay {\r\n\t\ttop: var(--menu-top-offset);\r\n\t\theight: calc(100% - var(--menu-top-offset));\r\n\t}\r\n\r\n\tcontainer.menu > .content > .topping {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\r\n\texport let levelWritable = writable(0);\r\n\r\n\texport const Levels = {\r\n\t\tINFO: 0,\r\n\t\tWARN: 1,\r\n\t\tERROR: 2,\r\n\t\tOK: 3,\r\n\t\tNONE: 4,\r\n\t};\r\n\r\n\tconst LevelClasses = [\r\n\t\t'info',\r\n\t\t'warn',\r\n\t\t'error',\r\n\t\t'ok',\r\n\t\t'none',\r\n\t];\r\n\r\n\tconst LevelIcons = [\r\n\t\t'error_outline',\r\n\t\t'warning',\r\n\t\t'error',\r\n\t\t'done',\r\n\t];\r\n\r\n\tlet contentDomContent = null;\r\n\tconst icon = writable(LevelIcons[0]);\r\n\r\n\tlevelWritable.subscribe((level) => {\r\n\t\tif (!contentDomContent) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tclearLevelClasses(contentDomContent);\r\n\r\n\t\tcontentDomContent.classList.add(LevelClasses[level]);\r\n\t\tif (LevelIcons[level] != null) {\r\n\t\t\ticon.set(LevelIcons[level]);\r\n\t\t}\r\n\t});\r\n\r\n\tonMount(() => {\r\n\t\tclearLevelClasses(contentDomContent);\r\n\t});\r\n\r\n\tfunction clearLevelClasses(node) {\r\n\t\tconst classesToBeRemoved = [];\r\n\r\n\t\tnode\r\n\t\t\t.classList\r\n\t\t\t.forEach((className) => {\r\n\t\t\t\tif (!LevelClasses.includes(className)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclassesToBeRemoved.push(className);\r\n\t\t\t});\r\n\t\r\n\t\tnode\r\n\t\t\t.classList\r\n\t\t\t.remove(...classesToBeRemoved);\r\n\t}\r\n</script>\r\n\r\n<component>\r\n\t<span\r\n\t\tclass='content error warn info ok none'\r\n\t\tbind:this={contentDomContent}\r\n\t>\r\n\t\t<icon>\r\n\t\t\t{$icon}\r\n\t\t</icon>\r\n\t\t<string class='text'>\r\n\t\t\t<slot>Hint</slot>\r\n\t\t</string>\r\n\t</span>\r\n</component>\r\n\r\n<style>\r\n\t.content.none {\r\n\t\topacity: 0;\r\n\t\theight: 0;\r\n\t}\r\n\r\n\t.content.ok,\r\n\t.content.ok * {\r\n\t\tcolor: var(--colour-ok-primary);\r\n\t}\r\n\r\n\t.content.warn,\r\n\t.content.warn * {\r\n\t\tcolor: var(--colour-warn-primary);\r\n\t}\r\n\r\n\t.content.error, \r\n\t.content.error * {\r\n\t\tcolor: var(--colour-error-primary);\r\n\t}\r\n\r\n\t.content, \r\n\t.content.info {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\t\r\n\t\tcolor: var(--colour-text-secondary);\r\n\r\n\t\toverflow: hidden;\r\n\r\n\t\t/* height for '.none' */\r\n\t\topacity: 1;\r\n\t\theight: calc(1rem + 2em);\r\n\t}\r\n\r\n\t.content,\r\n\t.content * {\r\n\t\ttransition: 0.2s var(--ease-slow-slow)\r\n\t}\r\n\r\n\tstring {\r\n\t\tfont-size: 1rem;\r\n\t\tpadding-left: 8px;\r\n\t}\r\n</style>",
    "<script>\r\n\timport {\r\n\t\tonMount,\r\n\t\tcreateEventDispatcher,\r\n\t} from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport { RandomUtility, CSSUtility } from '../../resources/utilities';\r\n\timport Button from './Button.svelte';\r\n\timport Hint from './Hint.svelte';\r\n\timport { Shadow } from '../../core/shadow';\r\n\r\n\t// @export\r\n\texport let valueWritable = writable('');\r\n\texport let value = $valueWritable;\r\n\texport function focus() {\r\n\t\tinputDomContent.focus();\r\n\t};\r\n\texport function submit() {\r\n\t\tdispatch('submit', valueWritable);\r\n\t}\r\n\t\r\n\texport let label = 'Input';\r\n\texport let buttonComponent = Button;\r\n\texport let buttonProps = {};\r\n\texport let hintLevelWritable = writable(0);\r\n\texport let hintWritable = writable(null);\r\n\texport let depth = 3;\r\n\texport let roundness = 'var(--roundness)';\r\n\texport let height = 56;\r\n\texport let width = '100%';\r\n\texport let buttonWidth = height;\r\n\texport let fontSize = '1rem';\r\n\texport let labelTop = 28;\r\n\texport let minIndent = 16;\r\n\texport let indent = 'max(var(--min-indent), var(--roundness))';\r\n\texport let backgroundColour = '--colour-background-secondary';\r\n\texport let activeBackgroundColour = '--colour-background-primary';\r\n\texport let textColour = '--colour-text-primary';\r\n\texport let labelColour = '--colour-text-secondary';\r\n\texport let floatingLabelIndent = '0';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tconst selfId = RandomUtility.int();\r\n\tlet isActive = false;\r\n\tlet formDomContent = null;\r\n\tlet inputDomContent = null;\r\n\r\n\t$: valueWritable.set(value);\r\n\t// $: value = $valueWritable;\r\n\tvalueWritable.subscribe((valueFromValueWritable) => {\r\n\t\tvalue = valueFromValueWritable;\r\n\t});\r\n\r\n\tonMount(() => {\r\n\t\tShadow.apply(depth, formDomContent);\r\n\t});\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--border-radius: {CSSUtility.parse(roundness)};\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--font-size: {CSSUtility.parse(fontSize)};\r\n\t\t--label-top: {CSSUtility.parse(labelTop)};\r\n\t\t--min-indent: {CSSUtility.parse(minIndent)};\r\n\t\t--indent: {CSSUtility.parse(indent)};\r\n\t\t--button-width: {CSSUtility.parse(buttonWidth)};\r\n\t'\r\n>\r\n\t<form \r\n\t\tclass='{isActive ? '' : 'inactive'} {value ? 'valued' : ''}'\r\n\t\tonsubmit='return false'\r\n\t\tbind:this={formDomContent}\r\n\t\tstyle='\r\n\t\t\t--active-colour-background: {CSSUtility.parse(activeBackgroundColour)};\r\n\t\t\t--colour-background: {CSSUtility.parse(backgroundColour)}\r\n\t\t'\r\n\t>\r\n\t\t<input\r\n\t\t\ttype='text'\r\n\t\t\tid={selfId}\r\n\t\t\tclass='text'\r\n\t\t\tplaceholder={label}\r\n\t\t\tbind:value\r\n\t\t\tbind:this={inputDomContent}\r\n\t\t\ton:focus={() => { isActive = true; }}\r\n\t\t\ton:blur={() => { isActive = false; }}\r\n\t\t\tstyle='\r\n\t\t\t\t--colour-text: {CSSUtility.parse(textColour)};\r\n\t\t\t'\r\n\t\t>\r\n\t\t<label\r\n\t\t\tfor='{selfId}'\r\n\t\t\tstyle='\r\n\t\t\t\t--colour-label: {CSSUtility.parse(labelColour)};\r\n\t\t\t\t--floating-label-indent: {CSSUtility.parse(floatingLabelIndent)};\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<string>\r\n\t\t\t\t{label}\r\n\t\t\t</string>\r\n\t\t</label>\r\n\t\t<slot \r\n\t\t\tname='button'\r\n\t\t\t{submit}\r\n\t\t>\r\n\t\t\t{#if buttonComponent}\r\n\t\t\t\t<container\r\n\t\t\t\t\tclass='button'\r\n\t\t\t\t>\r\n\t\t\t\t\t<svelte:component\r\n\t\t\t\t\t\tthis={buttonComponent}\r\n\t\t\t\t\t\theight='100%'\r\n\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t\ton:click={submit}\r\n\t\t\t\t\t\t{...buttonProps}\r\n\t\t\t\t\t></svelte:component>\r\n\t\t\t\t</container>\r\n\t\t\t{:else}\r\n\t\t\t\t<button\r\n\t\t\t\t\tstyle='display: none'\r\n\t\t\t\t\ton:click={submit}\r\n\t\t\t\t></button>\r\n\t\t\t{/if}\r\n\t\t</slot>\r\n\t</form>\r\n\t{#if $hintWritable !== null}\r\n\t\t<Hint levelWritable={hintLevelWritable}>{$hintWritable}</Hint>\r\n\t{/if}\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tposition: relative;\r\n\t\t/* padding: var(--label-top-position) 0 0; */\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tform {\r\n\t\tdisplay: flex;\r\n\r\n\t\ttransform: matrix(1, 0, 0, 1, 0, 0);\r\n\r\n\t\tbackground: var(--colour-background);\r\n\t\tbox-shadow: var(--shadow-inactive);\r\n\r\n\t\tmargin: 0;\r\n\r\n\t\tborder-radius: var(--border-radius);\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\r\n\tform:not(.inactive) {\r\n\t\tbackground: var(--active-colour-background);\r\n\t\tbox-shadow: var(--shadow);\r\n\r\n\t\tmargin: var(--label-top) 0 0 0;\r\n\t}\r\n\r\n\tform.valued {\r\n\t\tmargin: var(--label-top) 0 0 0;\r\n\t}\r\n\r\n\tinput.text {\r\n\t\twidth: 100%;\r\n\t\theight: var(--height);\r\n\r\n\t\tpadding: 0;\r\n\t\tborder: 0;\r\n\t\toutline: 0;\r\n\r\n\t\tbackground: transparent;\r\n\r\n\t\tfont-family: var(--font-family-2);\r\n\t\tfont-variation-settings: var(--font-variation-regular);\r\n\r\n\t\t/* for browsers that doesn't support the default value with 'max()' */\r\n\t\tpadding: 0 var(--min-indent);\r\n\t\tpadding: 0 var(--indent);\r\n\r\n\t\tfont-size: var(--font-size);\r\n\t\tline-height: 0.9em;\r\n\t\tcolor: var(--colour-text);\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\r\n\t/* input.text:focus {\r\n\t\tfont-variation-settings: var(--font-variation-bold);\r\n\t} */\r\n\t\r\n\tinput.text::placeholder {\r\n\t\tcolor: transparent;\r\n\t}\r\n\r\n\tinput.text:placeholder-shown ~ label {\r\n\t\tfont-size: var(--font-size);\r\n\t\tline-height: var(--font-size);\r\n\r\n\t\t/* for browsers that doesn't support the default value with 'max()' */\r\n\t\ttext-indent: var(--min-indent);\r\n\t\ttext-indent: var(--indent);\r\n\r\n\t\tcursor: text;\r\n\t\ttop: calc(var(--height) / 2 - (var(--font-size) / 2));\r\n\t}\r\n\r\n\tlabel {\r\n\t\tposition: absolute;\r\n\t\ttop: calc(0px - var(--label-top));\r\n\t\tdisplay: block;\r\n\r\n\t\t/* font-family: var(--font-family-2);\r\n\t\tfont-variation-settings: var(--font-variation-regular); */\r\n\t\ttext-indent: var(--floating-label-indent);\r\n\t\tfont-size: 1rem;\r\n\t\tline-height: 1rem;\r\n\t\t\r\n\r\n\t\ttransition: 0.2s var(--ease-slow-slow);\r\n\t}\r\n\r\n\tlabel > string {\r\n\t\tcolor: var(--colour-label);\r\n\t\tdisplay: inline;\r\n\t}\r\n\r\n\tinput.text:focus ~ label {\r\n\t\tposition: absolute;\r\n\t\ttop: calc(0px - var(--label-top));\r\n\t\tdisplay: block;\r\n\r\n\t\t/* font-variation-settings: var(--font-variation-bold); */\r\n\t\ttext-indent: var(--floating-label-indent);\r\n\t\tfont-size: 1rem;\r\n\t\tcolor: var(--colour-accent-primary);\r\n\t}\r\n\r\n\t/* reset input */\r\n\tinput.text:required, input.text:invalid {\r\n\t\tbox-shadow: none;\r\n\t}\r\n\r\n\tcontainer.button {\r\n\t\twidth: var(--button-width);\r\n\t}\r\n</style>",
    "<script>\r\n\timport * as router from 'svelte-spa-router';\r\n\timport SvgButton from './buttons/SvgButton.svelte';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\r\n\texport let colour = '--colour-accent-primary';\r\n</script>\r\n\r\n<component>\r\n\t<SvgButton\r\n\t\ton:click={() => {\r\n\t\t\tif (window.location.href.includes('#')) {\r\n\t\t\t\trouter.push('/');\r\n\t\t\t}\r\n\r\n\t\t\twindow.scrollTo({\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tbehavior: 'smooth',\r\n\t\t\t});\r\n\t\t}}\r\n\t\tsvg='\r\n\t\t<svg height=24px width=24px xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 749\" fill={CSSUtility.parse(colour)}>\r\n\t\t\t<g id=\"Layer_2\" data-name=\"Layer 2\">\r\n\t\t\t\t<rect x=\"750\" width=\"250\" height=\"250\"/>\r\n\t\t\t</g>\r\n\t\t\t<g id=\"Layer_3\" data-name=\"Layer 3\">\r\n\t\t\t\t<rect x=\"500\" y=\"250\" width=\"250\" height=\"250\"/>\r\n\t\t\t</g>\r\n\t\t\t<g id=\"Layer_4\" data-name=\"Layer 4\">\r\n\t\t\t\t<rect y=\"499\" width=\"250\" height=\"250\"/>\r\n\t\t\t</g>\r\n\t\t\t<g id=\"Layer_5\" data-name=\"Layer 5\">\r\n\t\t\t\t<rect x=\"250\" width=\"250\" height=\"500\"/>\r\n\t\t\t</g>\r\n\t\t</svg>\r\n\t\t'\r\n\t>\r\n\t</SvgButton>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n\timport lottie from 'lottie-web';\r\n\timport { onMount } from 'svelte';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\r\n\texport let src = '';\r\n\texport let animationData = null;\r\n\texport let height = '100%';\r\n\texport let width = '100%';\r\n\texport let options = {};\r\n\texport let overrideColour = null;\r\n\r\n\tlet containerDomContent = null;\r\n\texport let animation = null;\r\n\r\n\tonMount(async () => {\r\n\t\tconst json = animationData || (!src ? {} : await (await fetch(src)).json());\r\n\r\n\t\tanimation = lottie.loadAnimation({\r\n\t\t\tcontainer: containerDomContent,\r\n\t\t\tanimationData: json,\r\n\t\t\tautoplay: true,\r\n\t\t\tloop: true,\r\n\t\t\t...options,\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t'\r\n>\r\n\t<container\r\n\t\tbind:this={containerDomContent}\r\n\t\tclass='{overrideColour ? 'override' : ''}'\r\n\t\tstyle='\r\n\t\t\t--colour-override: {CSSUtility.parse(overrideColour)}\r\n\t\t'\r\n\t>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\toverflow: hidden;\r\n\t}\r\n\r\n\tcontainer.override :global(*) {\r\n\t\tfill: var(--colour-override);\r\n\t\tstroke: var(--colour-override);\r\n\t}\r\n\r\n\t/* :global(.lottie-player) {\r\n\t\ttop: 50%;\r\n    \ttransform: translateY(-50%);\r\n\t} */\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport { push, location } from 'svelte-spa-router';\r\n\timport { ResponsiveUtility, CSSUtility } from '../../resources/utilities';\r\n\timport Button from './Button.svelte';\r\n\timport Hamburger from './Hamburger.svelte';\r\n\r\n\t// @export\r\n\texport let isActiveWritable = writable(false);\r\n\r\n\t/** @type Record<string, string> */\r\n\texport let routes = {};\r\n\texport let backgroundColour = '--colour-background-primary';\r\n\texport let barToppingWidth = 120;\r\n\texport let barToppingHeight = '100%';\r\n\texport let hamburgerProps = {};\r\n\r\n\tconst { currentBreakpointWritable } = ResponsiveUtility;\r\n\tconst routeKeys = Object.keys(routes);\r\n\tconst toppings = (() => {\r\n\t\tconst result = {};\r\n\r\n\t\trouteKeys.forEach((route) => {\r\n\t\t\tresult[routes[route]] = () => href(route);\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t})();\r\n\r\n\t$: isSalad = !($currentBreakpointWritable < ResponsiveUtility.Breakpoints.TABLET);\r\n\r\n\tfunction href(destination) {\r\n\t\tpush(destination);\r\n\r\n\t\tisActiveWritable.set(false);\r\n\r\n\t\twindow.scrollTo({\r\n\t\t\ttop: 0,\r\n\t\t\tleft: 0,\r\n\t\t\tbehavior: 'smooth',\r\n\t\t});\r\n\t}\r\n</script>\r\n\r\n<component\r\n\tclass='{!isSalad ? 'hamburger' : 'salad'}'\r\n\tstyle='\r\n\t\t--colour-background: {CSSUtility.parse(backgroundColour)};\r\n\t'\r\n>\r\n\t{#if !isSalad}\r\n\t\t<Hamburger\r\n\t\t\t{toppings}\r\n\t\t\t{...hamburgerProps}\r\n\t\t/>\r\n\t{:else}\r\n\t\t<container\r\n\t\t\tclass='bar'\r\n\t\t\tstyle='\r\n\t\t\t\t--width: calc({CSSUtility.parse(barToppingWidth)} * {routeKeys.length});\r\n\t\t\t\t--height: {CSSUtility.parse(barToppingHeight)};\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<container\r\n\t\t\t\tclass='content'\r\n\t\t\t>\r\n\t\t\t\t{#each routeKeys as routeKey}\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ton:click={() => href(routeKey)}\r\n\t\t\t\t\t\ticon=''\r\n\t\t\t\t\t\tbackgroundColour='{\r\n\t\t\t\t\t\t\trouteKey === $location\r\n\t\t\t\t\t\t\t\t? '--colour-background-primary'\r\n\t\t\t\t\t\t\t\t: '#0000'\r\n\t\t\t\t\t\t}'\r\n\t\t\t\t\t\ttextColour='--colour-text-primary'\r\n\t\t\t\t\t\thoverColour='--colour-background-secondary'\r\n\t\t\t\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{routes[routeKey]}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t{/each}\r\n\t\t\t</container>\r\n\t\t</container>\r\n\t{/if}\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: 100%;\r\n\r\n\t\tdisplay: grid;\r\n\t\talign-items: center;\r\n\t\tjustify-items: center;\r\n\t}\r\n\r\n\tcontainer.bar {\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\t}\r\n\r\n\tcontainer.bar > .content {\r\n\t\theight: 100%;\r\n\t\twidth: 100%;\r\n\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: auto;\r\n\t\tgrid-template-rows: auto;\r\n\t\tgrid-auto-flow: column;\r\n\r\n\t\tjustify-items: center;\r\n\t\talign-items: center;\r\n\r\n\t\t/* gap: 14px; */\r\n\t}\r\n\r\n\tcomponent.salad {\r\n\t\theight: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n\timport strings from '../../resources/strings';\r\n\timport {\r\n\t\tCSSUtility,\r\n\t\tScrollUtility,\r\n\t} from '../../resources/utilities';\r\n\timport {\r\n\t\tdropIn as dropInRaw,\r\n\t\tdropOut as dropOutRaw,\r\n\t\tnoop,\r\n\t} from '../../core/transitioner';\r\n\timport {\r\n\t\tisSceneOutAnimationRunning,\r\n\t\tisSceneInAnimationRunning,\r\n\t} from '../../resources/stores';\r\n\r\n\texport let columns = 'auto';\r\n\texport let rows = 'auto';\r\n\texport let gap = '0';\r\n\texport let justify = 'start';\r\n\texport let align = 'center';\r\n\texport let width = 'auto';\r\n\texport let height = 'auto';\r\n\texport let isPadded = true;\r\n\texport let backgroundColour = '--colour-background-primary';\r\n\texport let isInAnimated = false;\r\n\texport let isOutAnimated = false;\r\n\r\n\tconst dropIn = isInAnimated ? dropInRaw : noop;\r\n\tconst dropOut = isOutAnimated ? dropOutRaw : noop;\r\n\r\n\tlet componentDomContent = null;\r\n\tlet isLocalInAnimationRunning = false;\r\n\r\n\t$: (isInAnimated || isOutAnimated)\r\n\t\t&& componentDomContent\r\n\t\t&& isLocalInAnimationRunning\r\n\t\t&& (\r\n\t\t\tcomponentDomContent.style.display = (\r\n\t\t\t\t$isSceneOutAnimationRunning\r\n\t\t\t\t\t? 'none'\r\n\t\t\t\t\t: ''\r\n\t\t\t)\r\n\t\t);\r\n</script>\r\n\r\n<component\r\n\tin:dropIn\r\n\tout:dropOut\r\n\ton:introstart={() => {\r\n\t\tisSceneInAnimationRunning.set(isLocalInAnimationRunning = true);\r\n\t}}\r\n\ton:introend={() => {\r\n\t\t// eslint-disable-next-line no-unused-vars\r\n\t\tisSceneInAnimationRunning.set(isLocalInAnimationRunning = false);\r\n\t}}\r\n\ton:outrostart={() => {\r\n\t\tisSceneOutAnimationRunning.set(true);\r\n\r\n\t\tScrollUtility.disable();\r\n\t}}\r\n\ton:outroend={() => {\r\n\t\tisSceneOutAnimationRunning.set(false);\r\n\r\n\t\tScrollUtility.enable();\r\n\t}}\r\n\tstyle='\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--align: {CSSUtility.parse(align)};\r\n\t\t--justify: {CSSUtility.parse(justify)};\r\n\t'\r\n\tbind:this={componentDomContent}\r\n>\r\n\t<container\r\n\t\tclass='content'\r\n\t\tstyle='\r\n\t\t\t--columns: {columns};\r\n\t\t\t--rows: {rows};\r\n\t\t\t--gap: {gap};\r\n\t\t\t--is-or-not-padding: {isPadded ? \"var(--padding)\" : \"0px\"};\r\n\t\t\t--colour-background: {CSSUtility.parse(backgroundColour)};\r\n\t\t'\r\n\t>\r\n\t\t<slot>\r\n\t\t\t<container class='placeholder'>\r\n\t\t\t\t<string>\r\n\t\t\t\t\t{strings.ui.scenes.common.warn.EMPTY_SCENE}\r\n\t\t\t\t</string>\r\n\t\t\t</container>\r\n\t\t</slot>\r\n\t</container>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: auto;\r\n\t\tgrid-template-rows: auto;\r\n\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\tflex-grow: 1;\r\n\t\tflex-shrink: 0;\r\n\t}\r\n\r\n\tcontainer.content {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: var(--columns);\r\n\t\tgrid-template-rows: var(--rows);\r\n\t\tgap: var(--gap);\r\n\r\n\t\tjustify-items: var(--justify);\r\n\t\talign-items: var(--align);\r\n\r\n\t\twidth: 100%;\r\n\t\theight: auto;\r\n\r\n\t\tbackground: var(--colour-background);\r\n\r\n\t\tpadding: var(--is-or-not-padding);\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\t\r\n\tcontainer.placeholder {\r\n\t\twidth: 100%;\r\n\r\n\t\tpadding: var(--padding);\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\tcontainer.placeholder > string {\r\n\t\ttext-align: center;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\r\n\texport const Directions = {\r\n\t\tHORIZONTAL: 0,\r\n\t\tVERTICAL: 1,\r\n\t};\r\n\r\n\texport let height = 24;\r\n\texport let width = 24;\r\n\r\n\texport let heightWritable = writable(height);\r\n\texport let widthWritable = writable(width);\r\n\texport let direction = Directions.HORIZONTAL;\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--height: calc({\r\n\t\t\tCSSUtility.parse(\r\n\t\t\t\t+(direction === Directions.HORIZONTAL)\r\n\t\t\t\t&& $heightWritable,\r\n\t\t\t)\r\n\t\t} - 1px);\r\n\t\t--width: calc({\r\n\t\t\tCSSUtility.parse(\r\n\t\t\t\t+(direction === Directions.VERTICAL)\r\n\t\t\t\t&& $widthWritable,\r\n\t\t\t)\r\n\t\t} - 1px);\r\n'></component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport Hamburger from '../Hamburger.svelte';\r\n\timport ScrollableAppBar from './ScrollableAppBar.svelte';\r\n\r\n\t// @export\r\n\texport let baseHeightWritable = writable(0);\r\n\texport let scrolledHeightWritable = writable(0);\r\n\r\n\texport let toppings = null;\r\n</script>\r\n\r\n<ScrollableAppBar\r\n\tbind:baseHeightWritable\r\n\tbind:scrolledHeightWritable\r\n\t{...$$restProps}\r\n>\r\n\t<container>\r\n\t\t<Hamburger\r\n\t\t\t{toppings}\r\n\t\t\tbuttonSize='calc(2rem + 32px)'\r\n\t\t\tmenuTopOffsetWritable={scrolledHeightWritable}\r\n\t\t/>\r\n\t</container>\r\n</ScrollableAppBar>\r\n\r\n<style>\r\n\tcontainer {\r\n\t\t/* width: calc(2rem + 32px); */\r\n\t\t/* --scroll-minimum-padding is defined on parent */\r\n\t\theight: 100%;\r\n\t\tpadding: calc((var(--scroll-minimum-padding) / 2) + 0.5rem) 0;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { writable } from 'svelte/store';\r\n\timport ScrollableAppBar from './ScrollableAppBar.svelte';\r\n\timport Navigator from '../Navigator.svelte';\r\n\r\n\t// @export\r\n\texport let baseHeightWritable = writable(0);\r\n\texport let scrolledHeightWritable = writable(0);\r\n\r\n\texport let routes = null;\r\n</script>\r\n\r\n<ScrollableAppBar\r\n\tbind:baseHeightWritable\r\n\tbind:scrolledHeightWritable\r\n\t{...$$restProps}\r\n>\r\n\t<container>\r\n\t\t<Navigator\r\n\t\t\t{routes}\r\n\t\t\thamburgerProps={{\r\n\t\t\t\tbuttonSize: 'calc(2rem + 32px)',\r\n\t\t\t\tmenuTopOffsetWritable: scrolledHeightWritable,\r\n\t\t\t}}\r\n\t\t/>\r\n\t</container>\r\n</ScrollableAppBar>\r\n\r\n<style>\r\n\tcontainer {\r\n\t\t/* width: calc(2rem + 32px); */\r\n\t\t/* --scroll-minimum-padding is defined on parent */\r\n\t\theight: 100%;\r\n\t\tpadding: calc((var(--scroll-minimum-padding) / 2) + 0.5rem) 0;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport Button from '../Button.svelte';\r\n\timport { CSSUtility } from '../../../resources/utilities';\r\n\r\n\texport let hoverColour = '#0000';\r\n\texport let backgroundColour = '#0000';\r\n\texport let height = '100%';\r\n\texport let width = '100%';\r\n\r\n\texport let svgSrc = '';\r\n\texport let svg = '';\r\n\texport let svgColour = backgroundColour;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet svgPlaceholderDomContent = null;\r\n\r\n\tonMount(async () => {\r\n\t\tconst svgText = (\r\n\t\t\tsvg\r\n\t\t\t|| (\r\n\t\t\t\tsvgSrc\r\n\t\t\t\t&& await (await fetch(svgSrc)).text()\r\n\t\t\t)\r\n\t\t\t|| ''\r\n\t\t);\r\n\r\n\t\tsvgPlaceholderDomContent.outerHTML = svgText;\r\n\t});\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t'\r\n>\r\n\t<Button\r\n\t\t{...$$restProps}\r\n\t\t{height}\r\n\t\t{width}\r\n\t\t{backgroundColour}\r\n\t\t{hoverColour}\r\n\t\tisText={false}\r\n\t\tpadding='16px 16px'\r\n\t\troundness='50px'\r\n\t\ton:click={() => dispatch('click')}\r\n\t>\r\n\t\t<container\r\n\t\t\tstyle='\r\n\t\t\t\t--svg-colour: {svgColour};\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<placeholder\r\n\t\t\t\tbind:this={svgPlaceholderDomContent}\r\n\t\t\t/>\r\n\t\t</container>\r\n\t</Button>\r\n</component>\r\n\r\n<style>\r\n\tcontainer {\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\r\n\t\toverflow: hidden;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport Dialog from '../Dialog.svelte';\r\n\timport Button from '../Button.svelte';\r\n\timport strings from '../../../resources/strings';\r\n\timport AppBarScene from '../scenes/AppBarScene.svelte';\r\n\r\n\texport let title = 'Confirm.dialog';\r\n\texport let sceneColumns = 'auto';\r\n\texport let sceneRows = 'auto';\r\n\texport let sceneGap = '0';\r\n\texport let depth = 3;\r\n\texport let dismissOnClick = false;\r\n\texport let isActiveWritable = writable(true);\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\tlet dialogDomContent = null;\r\n</script>\r\n\r\n<Dialog\r\n\t{depth}\r\n\t{dismissOnClick}\r\n\t{isActiveWritable}\r\n\tbind:this={dialogDomContent}\r\n>\r\n\t<AppBarScene\r\n\t\t{title}\r\n\t\tcolumns={sceneColumns}\r\n\t\trows={sceneRows}\r\n\t\tgap={sceneGap}\r\n\t>\r\n\t\t<slot></slot>\r\n\t</AppBarScene>\r\n\t<container class='buttons'>\r\n\t\t<Button \r\n\t\t\ticon='close'\r\n\t\t\twidth='100%'\r\n\t\t\tbackgroundColour='--colour-background-primary'\r\n\t\t\thoverColour='--colour-background-secondary'\r\n\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\ton:click={() => {\r\n\t\t\t\tdialogDomContent.dismiss();\r\n\t\t\t\tdispatch('cancel');\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{strings.common.info.CANCEL}\r\n\t\t</Button>\r\n\t\t<Button \r\n\t\t\ticon='adjust'\r\n\t\t\twidth='100%'\r\n\t\t\tbackgroundColour='--colour-ok-primary'\r\n\t\t\thoverColour='--colour-ok-secondary'\r\n\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\ton:click={() => {\r\n\t\t\t\tdialogDomContent.dismiss();\r\n\t\t\t\tdispatch('confirm');\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{strings.common.info.CONFIRM}\r\n\t\t</Button>\r\n\t</container>\r\n</Dialog>\r\n\r\n<style>\r\n\tcontainer.buttons {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(2, 1fr);\r\n\t\tbackground: var(--colour-background-primary);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport Dialog from '../Dialog.svelte';\r\n\timport Button from '../Button.svelte';\r\n\timport Input from '../Input.svelte';\r\n\timport strings from '../../../resources/strings';\r\n\timport Spacer from '../Spacer.svelte';\r\n\timport AppBarScene from '../scenes/AppBarScene.svelte';\r\n\r\n\texport let title = 'Input.dialog';\r\n\texport let sceneColumns = 'auto';\r\n\texport let sceneRows = 'auto';\r\n\texport let sceneGap = '0';\r\n\texport let depth = 3;\r\n\texport let dismissOnClick = false;\r\n\texport let isActiveWritable = writable(true);\r\n\texport let clearOnDismiss = true;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\tlet dialog = null;\r\n\tlet input = null;\r\n\r\n\t$: $isActiveWritable && input?.focus();\r\n\r\n\tfunction dismiss() {\r\n\t\tdialog.dismiss();\r\n\r\n\t\tif (clearOnDismiss) {\r\n\t\t\tinput.valueWritable.set('');\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<Dialog\r\n\t{depth}\r\n\t{dismissOnClick}\r\n\t{isActiveWritable}\r\n\tbind:this={dialog}\r\n>\r\n\t<AppBarScene\r\n\t\t{title}\r\n\t\tcolumns={sceneColumns}\r\n\t\trows={sceneRows}\r\n\t\tgap={sceneGap}\r\n\t>\r\n\t\t<slot></slot>\r\n\t\t<Spacer />\r\n\t\t<Input\r\n\t\t\tlabel={title}\r\n\t\t\tbuttonComponent={null}\r\n\t\t\tbind:this={input}\r\n\t\t\ton:submit={({ detail: value }) => {\r\n\t\t\t\tdismiss();\r\n\t\t\t\tdispatch('submit', value);\r\n\t\t\t}}\r\n\t\t/>\r\n\t</AppBarScene>\r\n\t<container class='buttons'>\r\n\t\t<Button \r\n\t\t\ticon='close'\r\n\t\t\twidth='100%'\r\n\t\t\tbackgroundColour='--colour-background-primary'\r\n\t\t\thoverColour='--colour-background-secondary'\r\n\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\ton:click={() => {\r\n\t\t\t\tdismiss();\r\n\t\t\t\tdispatch('cancel');\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{strings.common.info.CANCEL}\r\n\t\t</Button>\r\n\t\t<Button \r\n\t\t\ticon='adjust'\r\n\t\t\twidth='100%'\r\n\t\t\tbackgroundColour='--colour-ok-primary'\r\n\t\t\thoverColour='--colour-ok-secondary'\r\n\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\ton:click={() => input.submit()}\r\n\t\t>\r\n\t\t\t{strings.common.info.CONFIRM}\r\n\t\t</Button>\r\n\t</container>\r\n</Dialog>\r\n\r\n<style>\r\n\tcontainer.buttons {\r\n\t\tdisplay: grid;\r\n\t\tgrid-template-columns: repeat(2, 1fr);\r\n\t\tbackground: var(--colour-background-primary);\r\n\t}\r\n</style>",
    "<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n\timport Dialog from '../Dialog.svelte';\r\n\timport Button from '../Button.svelte';\r\n\timport strings from '../../../resources/strings';\r\n\timport AppBarScene from '../scenes/AppBarScene.svelte';\r\n\r\n\texport let title = 'Ok.dialog';\r\n\texport let sceneColumns = 'auto';\r\n\texport let sceneRows = 'auto';\r\n\texport let sceneGap = '0';\r\n\texport let depth = 3;\r\n\texport let dismissOnClick = true;\r\n\texport let isActiveWritable = writable(true);\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\tlet dialogDomContent = null;\r\n</script>\r\n\r\n<Dialog\r\n\t{depth}\r\n\t{dismissOnClick}\r\n\t{isActiveWritable}\r\n\tbind:this={dialogDomContent}\r\n>\r\n\t<AppBarScene\r\n\t\t{title}\r\n\t\tcolumns={sceneColumns}\r\n\t\trows={sceneRows}\r\n\t\tgap={sceneGap}\r\n\t>\r\n\t\t<slot></slot>\r\n\t</AppBarScene>\r\n\t<container class='buttons'>\r\n\t\t<Button \r\n\t\t\ticon='adjust'\r\n\t\t\twidth='100%'\r\n\t\t\tbackgroundColour='--colour-ok-primary'\r\n\t\t\thoverColour='--colour-ok-secondary'\r\n\t\t\trippleColour='--colour-text-secondary'\r\n\t\t\ton:click={() => {\r\n\t\t\t\tdialogDomContent.dismiss();\r\n\t\t\t\tdispatch('ok');\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{strings.common.info.OK}\r\n\t\t</Button>\r\n\t</container>\r\n</Dialog>\r\n\r\n<style>\r\n\tcontainer.buttons {\r\n\t\tbackground: var(--colour-background-primary);\r\n\t}\r\n</style>",
    "<script>\r\n\timport AppBar from '../AppBar.svelte';\r\n\timport Scene from '../Scene.svelte';\r\n\timport { CSSUtility } from '../../../resources/utilities';\r\n\r\n\texport let appBarComponent = AppBar;\r\n\texport let title = null;\r\n\texport let appBarProps = {};\r\n\texport let height = 'auto';\r\n\texport let width = 'auto';\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--height: {CSSUtility.parse(height)};\r\n\t\t--width: {CSSUtility.parse(width)};\r\n\t'\r\n>\r\n\t<slot name='appBar'>\r\n\t\t<svelte:component\r\n\t\t\tthis={appBarComponent}\r\n\t\t\t{title}\r\n\t\t\t{...appBarProps}\r\n\t\t/>\r\n\t</slot>\r\n\t<Scene\r\n\t\theight='auto'\r\n\t\twidth='auto'\r\n\t\t{...$$restProps}\r\n\t>\r\n\t\t<slot />\r\n\t</Scene>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\theight: var(--height);\r\n\t\twidth: var(--width);\r\n\t}\r\n</style>",
    "<script>\r\n\timport hull from 'hull.js';\r\n\timport { WindowUtility } from '../../resources/utilities';\r\n\r\n\tconst { innerWritable } = WindowUtility;\r\n\r\n\twindow.addEventListener('resize', render);\r\n\r\n\tlet columnsNumber = null;\r\n\tlet rowsNumber = null;\r\n\t/** @typedef {[number, number]} coordinate */\r\n\t/** @type coordinate */\r\n\tlet randomCoordinateMatrix = null;\r\n\t/** @type coordinate[][] */\r\n\tlet randomCoordinateMatrixIndexes = null;\r\n\t/** @type string[] */\r\n\tconst gridCSS = [];\r\n\t/** @type string[] */\r\n\tconst clipPathCSS = [];\r\n\t/** @type string[] */\r\n\tconst zIndexCSS = [];\r\n\r\n\trender();\r\n\r\n\t/**\r\n\t * @returns {{\r\n\t * \t\tmatrix: typeof randomCoordinateMatrix,\r\n\t * \t\tmatrixIndexes: typeof randomCoordinateMatrixIndexes,\r\n\t * }}\r\n\t * */\r\n\tfunction getRandomCoordinateMatrix(matrixColumnsNumber, matrixRowsNumber) {\r\n\t\tconst matrix = [];\r\n\t\tconst matrixIndexes = [];\r\n\r\n\t\tif (!matrixColumnsNumber\r\n\t\t\t|| !matrixRowsNumber) {\r\n\t\t\treturn {\r\n\t\t\t\tmatrix: null,\r\n\t\t\t\tmatrixIndexes: null,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tlet blockIndex = 0;\r\n\t\tfor (let yIndex = 0, yLength = matrixRowsNumber; yIndex < yLength; ++yIndex) {\r\n\t\t\tfor (let xIndex = 0, xLength = matrixColumnsNumber; xIndex < xLength; ++xIndex) {\r\n\t\t\t\tif (matrix[yIndex] === undefined) {\r\n\t\t\t\t\tmatrix[yIndex] = [];\r\n\t\t\t\t} else if (matrix[yIndex][xIndex] !== undefined) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// get index and then increment\r\n\t\t\t\tconst currentBlockIndex = blockIndex++;\r\n\r\n\t\t\t\t// make the first move on the current block\r\n\t\t\t\tmatrix[yIndex][xIndex] = currentBlockIndex;\r\n\t\t\t\tmatrixIndexes[currentBlockIndex] = [[xIndex, yIndex]];\r\n\r\n\t\t\t\tlet yIndexMove = yIndex;\r\n\t\t\t\tlet xIndexMove = xIndex;\r\n\r\n\t\t\t\tconst move = () => {\r\n\t\t\t\t\tconst isGoingToMove = Math.random() > 0.1;\r\n\r\n\t\t\t\t\tif (!isGoingToMove) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst direction = Math.floor(Math.random() * 4);\r\n\r\n\t\t\t\t\tswitch (direction) {\r\n\t\t\t\t\t// top\r\n\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t--xIndexMove;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t// right\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t++yIndexMove;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t// down\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t++xIndexMove;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t// left\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t--yIndexMove;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (xIndexMove < 0\r\n\t\t\t\t\t|| xIndexMove >= xLength\r\n\t\t\t\t\t|| yIndexMove < 0\r\n\t\t\t\t\t|| yIndexMove >= yLength) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (matrix[yIndexMove] === undefined) {\r\n\t\t\t\t\t\tmatrix[yIndexMove] = [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst target = matrix[yIndexMove][xIndexMove];\r\n\r\n\t\t\t\t\tif (target !== undefined) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmatrix[yIndexMove][xIndexMove] = currentBlockIndex;\r\n\t\t\t\t\tmatrixIndexes[currentBlockIndex].push([xIndexMove, yIndexMove]);\r\n\r\n\t\t\t\t\tmove();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tmove();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmatrix,\r\n\t\t\tmatrixIndexes,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {coordinate[]} coordinates\r\n\t * */\r\n\tfunction getMaximumAndMinimumCoordinate(coordinates) {\r\n\t\tconst result = {\r\n\t\t\tx: {\r\n\t\t\t\tmaximum: null,\r\n\t\t\t\tminimum: null,\r\n\t\t\t},\r\n\t\t\ty: {\r\n\t\t\t\tmaximum: null,\r\n\t\t\t\tminimum: null,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tcoordinates.forEach(([x, y]) => {\r\n\t\t\tif (result.x.maximum == null || x > result.x.maximum) {\r\n\t\t\t\tresult.x.maximum = x;\r\n\t\t\t}\r\n\t\t\tif (result.x.minimum == null || x < result.x.minimum) {\r\n\t\t\t\tresult.x.minimum = x;\r\n\t\t\t}\r\n\t\t\tif (result.y.maximum == null || y > result.y.maximum) {\r\n\t\t\t\tresult.y.maximum = y;\r\n\t\t\t}\r\n\t\t\tif (result.y.minimum == null || y < result.y.minimum) {\r\n\t\t\t\tresult.y.minimum = y;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/** @param {number} number */\r\n\tfunction fromDecimalToPercent(number) {\r\n\t\treturn `${number * 100}%`;\r\n\t}\r\n\r\n\t/** @param {string} string */\r\n\tfunction fromPercentToDecimal(string) {\r\n\t\treturn Number(string.substr(0, string.length - 1)) / 100;\r\n\t}\r\n\r\n\tfunction getOffsetsFromDirection(direction) {\r\n\t\tconst offsets = {\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t};\r\n\r\n\t\tswitch (direction) {\r\n\t\t\tcase 0:\r\n\t\t\t\toffsets.y = -1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\toffsets.x = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\toffsets.y = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\toffsets.x = -1;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unrecognized direction to get offsets from — ${direction}`);\r\n\t\t}\r\n\r\n\t\treturn offsets;\r\n\t}\r\n\r\n\tfunction getInvertedDirection(direction) {\r\n\t\tswitch (direction) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn 2;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn 3;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn 0;\r\n\t\t\tcase 3:\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unrecognized direction to invert — ${direction}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {[number, number][]} polygonVerticies */\r\n\tfunction getNearestVertexInDirection(direction, startingVertex, polygonVerticies) {\r\n\t\tconst offsets = getOffsetsFromDirection(direction);\r\n\t\tconst xOrY = Math.abs(offsets.y);\r\n\t\tconst isNextInsteadOfBefore = xOrY === 0 ? offsets.x > 0 : offsets.y > 0;\r\n\r\n\t\tconst validVerticies = polygonVerticies\r\n\t\t\t.filter((vertex) => (\r\n\t\t\t\tvertex[Number(!xOrY)] === startingVertex[Number(!xOrY)]\r\n\t\t\t\t&& (\r\n\t\t\t\t\tisNextInsteadOfBefore\r\n\t\t\t\t\t\t? vertex[xOrY] > startingVertex[xOrY]\r\n\t\t\t\t\t\t: vertex[xOrY] < startingVertex[xOrY]\r\n\t\t\t\t)\r\n\t\t\t));\r\n\t\tconst sortedVerticies = validVerticies\r\n\t\t\t.sort((a, b) => a[xOrY] - b[xOrY]);\r\n\t\r\n\t\treturn sortedVerticies[isNextInsteadOfBefore ? 0 : sortedVerticies.length - 1] ?? null;\r\n\t}\r\n\r\n\tfunction render() {\r\n\t\tcolumnsNumber = Math.floor($innerWritable.width / 100);\r\n\t\trowsNumber = Math.floor($innerWritable.height / 100);\r\n\r\n\t\tif (!columnsNumber\r\n\t\t\t|| !rowsNumber) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { matrix, matrixIndexes } = getRandomCoordinateMatrix(columnsNumber, rowsNumber);\r\n\t\trandomCoordinateMatrix = matrix;\r\n\t\trandomCoordinateMatrixIndexes = matrixIndexes;\r\n\r\n\t\trandomCoordinateMatrixIndexes.forEach((randomCoordinateMatrixIndex, i) => {\r\n\t\t\tconst maximumAndMinimumCoordinate = getMaximumAndMinimumCoordinate(randomCoordinateMatrixIndex);\r\n\t\t\tconst grid = {\r\n\t\t\t\tcolumn: `${\r\n\t\t\t\t\tmaximumAndMinimumCoordinate.x.minimum\r\n\t\t\t\t\t+ 1\r\n\t\t\t\t} / span ${\r\n\t\t\t\t\tmaximumAndMinimumCoordinate.x.maximum\r\n\t\t\t\t\t- maximumAndMinimumCoordinate.x.minimum\r\n\t\t\t\t\t+ 1\r\n\t\t\t\t}`,\r\n\t\t\t\trow: `${\r\n\t\t\t\t\tmaximumAndMinimumCoordinate.y.minimum\r\n\t\t\t\t\t+ 1\r\n\t\t\t\t} / span ${\r\n\t\t\t\t\tmaximumAndMinimumCoordinate.y.maximum\r\n\t\t\t\t\t- maximumAndMinimumCoordinate.y.minimum\r\n\t\t\t\t\t+ 1\r\n\t\t\t\t}`,\r\n\t\t\t};\r\n\t\t\t/** @typedef {[number, number]} vertex */\r\n\t\t\t/** @type {Set<vertex>} */\r\n\t\t\tconst rawPolygon = [];\r\n\t\t\tconst totalWidth = maximumAndMinimumCoordinate.x.maximum\r\n\t\t\t\t- maximumAndMinimumCoordinate.x.minimum\r\n\t\t\t\t+ 1;\r\n\t\t\tconst totalHeight = maximumAndMinimumCoordinate.y.maximum\r\n\t\t\t\t- maximumAndMinimumCoordinate.y.minimum\r\n\t\t\t\t+ 1;\r\n\t\t\tconst unitWidth = 1;\r\n\t\t\tconst unitHeight = 1;\r\n\r\n\t\t\trandomCoordinateMatrixIndex.forEach(([x, y]) => {\r\n\t\t\t\tconst xRelative = x - maximumAndMinimumCoordinate.x.minimum;\r\n\t\t\t\tconst yRelative = y - maximumAndMinimumCoordinate.y.minimum;\r\n\r\n\t\t\t\trawPolygon.push(`${fromDecimalToPercent((xRelative) / totalWidth)} ${fromDecimalToPercent((yRelative) / totalHeight)}`);\r\n\t\t\t\trawPolygon.push(`${fromDecimalToPercent((xRelative) / totalWidth)} ${fromDecimalToPercent((yRelative + unitHeight) / totalHeight)}`);\r\n\t\t\t\trawPolygon.push(`${fromDecimalToPercent((xRelative + unitWidth) / totalWidth)} ${fromDecimalToPercent((yRelative + unitHeight) / totalHeight)}`);\r\n\t\t\t\trawPolygon.push(`${fromDecimalToPercent((xRelative + unitWidth) / totalWidth)} ${fromDecimalToPercent((yRelative) / totalHeight)}`);\r\n\t\t\t});\r\n\r\n\t\t\tconst filteredPolygon = (() => {\r\n\t\t\t\tconst seen = {};\r\n\t\t\t\tconst out = [];\r\n\t\t\t\tlet iii = 0;\r\n\t\t\t\tfor (let ii = 0, l = rawPolygon.length; ii < l; ii++) {\r\n\t\t\t\t\tconst item = rawPolygon[ii];\r\n\t\t\t\t\tconsole.log(seen[item]);\r\n\r\n\t\t\t\t\tif (seen[item] === undefined) {\r\n\t\t\t\t\t\tseen[item] = 1;\r\n\t\t\t\t\t\tout[iii++] = item;\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tseen[item] += 1;\r\n\r\n\t\t\t\t\tif (seen[item] >= 4) {\r\n\t\t\t\t\t\tconsole.log(out.splice(out.indexOf(item), 1));\r\n\t\t\t\t\t\t--iii;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn out;\r\n\t\t\t})();\r\n\t\t\tconst polygonVerticiesString = Array.from(filteredPolygon);\r\n\t\t\t/** @type vertex[] */\r\n\t\t\tconst polygonVerticies = polygonVerticiesString\r\n\t\t\t\t.map(\r\n\t\t\t\t\t(vertex) => vertex\r\n\t\t\t\t\t\t?.split(' ')\r\n\t\t\t\t\t\t.map(\r\n\t\t\t\t\t\t\t(vertexPart) => fromPercentToDecimal(vertexPart),\r\n\t\t\t\t\t\t),\r\n\t\t\t\t);\r\n\t\t\tconst arrangedPolygonVerticies = hull(polygonVerticies, 0.7);\r\n\t\t\tconst arrangedPolygonVerticiesString = arrangedPolygonVerticies.map(\r\n\t\t\t\t(vertex) => vertex\r\n\t\t\t\t\t.map(\r\n\t\t\t\t\t\t(vertexPart) => fromDecimalToPercent(vertexPart),\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.join(' '),\r\n\t\t\t);\r\n\r\n\t\t\tgridCSS[i] = `grid-column: ${grid.column}; grid-row: ${grid.row}`;\r\n\t\t\tclipPathCSS[i] = `clip-path: polygon(${arrangedPolygonVerticiesString})`;\r\n\t\t\tzIndexCSS[i] = `z-index: ${\r\n\t\t\t\tMath.floor(\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tmaximumAndMinimumCoordinate.x.minimum\r\n\t\t\t\t\t\t\t- maximumAndMinimumCoordinate.x.maximum\r\n\t\t\t\t\t\t+ maximumAndMinimumCoordinate.y.minimum\r\n\t\t\t\t\t\t\t- maximumAndMinimumCoordinate.y.maximum\r\n\t\t\t\t\t) * 2,\r\n\t\t\t\t) + 20\r\n\t\t\t}`;\r\n\t\t});\r\n\r\n\t\tconsole.log(gridCSS, clipPathCSS);\r\n\t}\r\n</script>\r\n\r\n<component>\r\n\t{#each gridCSS as gridCSSPart, i}\r\n\t\t<div style='{zIndexCSS[i]};{gridCSSPart};{clipPathCSS[i]};background: #{(i * 3).toString().padStart(3, '0')}'></div>\r\n\t{/each}\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\tdisplay: grid;\r\n\t\twidth: 100%;\r\n\t\theight: 100vh;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { writable, get as getWritableValue } from 'svelte/store';\r\n\timport strings from '../../resources/strings';\r\n\timport { CSSUtility } from '../../resources/utilities';\r\n\timport Button from '../blocks/Button.svelte';\r\n\timport Card from '../blocks/Card.svelte';\r\n\timport Input from '../blocks/Input.svelte';\r\n\r\n\texport let height = 'auto';\r\n\texport let width = '100%';\r\n\texport let heightWritable = writable(height);\r\n\texport let widthWritable = writable(width);\r\n\r\n\t/** @type HTMLElement */\r\n\tlet outputDomContent = null;\r\n\r\n\tconst user = navigator.userAgent\r\n\t\t.substring(\r\n\t\t\tnavigator.userAgent.indexOf('(') + 1,\r\n\t\t\tnavigator.userAgent.indexOf(';'),\r\n\t\t)\r\n\t\t.replace(/ /g, '-')\r\n\t\t.toLowerCase();\r\n\tconst tld = window.location.href\r\n\t\t.substring(\r\n\t\t\twindow.location.href.indexOf('//') + 2,\r\n\t\t\twindow.location.href.replace('//', '__').indexOf('/'),\r\n\t\t);\r\n\tconst windowTitle = `${user}@${tld}`;\r\n\tconst initModuleName = `${tld.replace(/[.:]/g, '-')}-core`;\r\n\tconst { info, warn, error } = strings.ui.components.terminal;\r\n\r\n\t/** @type {{ string: string, colour: string, tag: string }[]} */\r\n\tlet outputLines = [];\r\n\r\n\tfunction pushDefault(string) {\r\n\t\toutputLines = [...outputLines, { tag: null, string, colour: null }];\r\n\t}\r\n\r\n\tfunction pushLoad(string) {\r\n\t\toutputLines = [...outputLines, { tag: info.prefix.LOAD, string, colour: '--colour-ok-primary' }];\r\n\t}\r\n\r\n\tfunction pushError(string) {\r\n\t\toutputLines = [...outputLines, { tag: info.prefix.ERROR, string, colour: '--colour-error-primary' }];\r\n\t}\r\n\t\r\n\tonMount(async () => {\r\n\t\tawait new Promise((resolve) => setTimeout(resolve, 300));\r\n\r\n\t\toutput('init');\r\n\t});\r\n\r\n\tasync function onSubmit({ detail: valueWritable }) {\r\n\t\t/** @type string */\r\n\t\tconst value = getWritableValue(valueWritable);\r\n\t\tconst decodedString = decodeString(value);\r\n\t\tconst encodedString = encodeString(decodedString);\r\n\r\n\t\tvalueWritable.set(encodedString);\r\n\t\toutput(decodedString, value);\r\n\r\n\t\tawait new Promise((resolve) => setTimeout(resolve, 100));\r\n\r\n\t\tvalueWritable.set('');\r\n\t}\r\n\r\n\tfunction die() {\r\n\t\t// // exit page if there's history\r\n\t\t// for (let i = 0, l = window.history.length; i < l; ++i) {\r\n\t\t// \twindow.history.back();\r\n\t\t// }\r\n\t\t// for (let i = 0, l = window.history.length; i < l; ++i) {\r\n\t\t// \twindow.history.forward();\r\n\t\t// }\r\n\r\n\t\t// clear page instead if there's no history\r\n\t\tdocument.documentElement.innerHTML = '<body style=\"margin:0; height: 100%; width: 100%; display: flex; align-items: center; justify-content: center; user-select: none; cursor: crosshair\"><h1 onclick=\"window.location.reload()\">💀</h1></body>';\r\n\t\tdocument.documentElement.style = 'height: 100%';\r\n\t\tdocument.title = '??';\r\n\t}\r\n\r\n\tfunction getOutputResponse(command) {\r\n\t\tconst args = command.split(' ');\r\n\r\n\t\tconst [program, ...parameters] = args;\r\n\r\n\t\tswitch (program) {\r\n\t\t\tcase 'hello':\r\n\t\t\t\treturn ['🙃'];\r\n\t\t\tcase 'die':\r\n\t\t\t\treturn ['💔', 500, '🔪', 200, die];\r\n\t\t\tcase 'init':\r\n\t\t\t\treturn [\r\n\t\t\t\t\t200,\r\n\t\t\t\t\t() => pushLoad(initModuleName),\r\n\t\t\t\t\t500,\r\n\t\t\t\t\t// () => pushError(error.FAKE.replace('%1', initModuleName))\r\n\t\t\t\t];\r\n\t\t\tcase 'echo':\r\n\t\t\t\treturn [parameters.join(' ')];\r\n\t\t\tcase 'exit':\r\n\t\t\t\treturn [warn.COMMAND_NOT_RECOGNIZED.replace('%1', 'escape')];\r\n\t\t\tcase 'cls':\r\n\t\t\t\treturn [() => { outputDomContent.textContent = ''; }];\r\n\t\t\tcase '':\r\n\t\t\t\treturn [''];\r\n\t\t\tdefault:\r\n\t\t\t\treturn [warn.COMMAND_NOT_RECOGNIZED.replace('%1', program)];\r\n\t\t}\r\n\t}\r\n\r\n\tasync function output(command, rawValue = command) {\r\n\t\tif (typeof command !== 'string') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst prefix = windowTitle;\r\n\t\tconst response = getOutputResponse(command);\r\n\t\r\n\t\t// response.push('\\n');\r\n\r\n\t\tpushDefault(`${prefix}:~$ ${rawValue}`);\r\n\t\r\n\t\t// eslint-disable-next-line no-restricted-syntax\r\n\t\tfor (const item of response) {\r\n\t\t\tswitch (typeof item) {\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tif (item.length === 0) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpushDefault(item);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'function':\r\n\t\t\t\t\toutput(item());\r\n\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, item));\r\n\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction encodeString(string) {\r\n\t\tlet result = '';\r\n\t\tlet charCode = 0;\r\n\t\tconst PREFIX = String.fromCharCode(string.length + 1000);\r\n\t\tconst SHIFT_NUMBER = 20;\r\n\r\n\t\tfor (let i = 0, l = string.length; i < l; ++i) {\r\n\t\t\tcharCode = (string[i].charCodeAt()) + SHIFT_NUMBER;\r\n\t\t\tresult += String.fromCharCode(charCode);\r\n\t\t}\r\n\r\n\t\treturn PREFIX + result;\r\n\t}\r\n\r\n\tfunction decodeString(string) {\r\n\t\tif (string.charCodeAt(0) !== string.length - 1 + 1000) {\r\n\t\t\treturn string;\r\n\t\t}\r\n\r\n\t\tconst unprefixedString = string.substr(1);\r\n\r\n\t\tlet result = '';\r\n\t\tlet charCode = 0;\r\n\t\tconst SHIFT_NUMBER = 20;\r\n\r\n\t\tfor (let i = 0, l = unprefixedString.length; i < l; ++i) {\r\n\t\t\tcharCode = (unprefixedString[i].charCodeAt()) - SHIFT_NUMBER;\r\n\t\t\tresult += String.fromCharCode(charCode);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n</script>\r\n\r\n<component\r\n\tstyle='\r\n\t\t--width: {CSSUtility.parse($widthWritable)}\r\n\t'\r\n>\r\n\t<Card\r\n\t\tisPadded={false}\r\n\t\tisInAnimated={false}\r\n\t\tisOutAnimated={false}\r\n\t\tisFloatingInverted={true}\r\n\t\tbackgroundColour='transparent'\r\n\t\thoverColour='transparent'\r\n\t\twidth='100%'\r\n\t\theight='100%'\r\n\t\troundness='0'\r\n\t>\r\n\t\t<container\r\n\t\t\tclass='content'\r\n\t\t\tstyle='\r\n\t\t\t\t--height: {CSSUtility.parse($heightWritable)}\r\n\t\t\t'\r\n\t\t>\r\n\t\t\t<!-- <container\r\n\t\t\t\tclass='bar'\r\n\t\t\t>\r\n\t\t\t\t<container\r\n\t\t\t\t\tclass='title'\r\n\t\t\t\t>\r\n\t\t\t\t\t<string>\r\n\t\t\t\t\t\t{windowTitle}\r\n\t\t\t\t\t</string>\r\n\t\t\t\t</container>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tpadding='16'\r\n\t\t\t\t\twidth='64'\r\n\t\t\t\t\ticon='close'\r\n\t\t\t\t\troundness='0'\r\n\t\t\t\t\tbackgroundColour='transparent'\r\n\t\t\t\t\thoverColour='#ffffff11'\r\n\t\t\t\t\ttextColour='--colour-background-secondary'\r\n\t\t\t\t\ton:click={die}\r\n\t\t\t\t>\r\n\t\t\t\t</Button>\r\n\t\t\t</container> -->\r\n\t\t\t<container\r\n\t\t\t\tclass='window'\r\n\t\t\t>\r\n\t\t\t\t<container\r\n\t\t\t\t\tclass='output'\r\n\t\t\t\t\tbind:this={outputDomContent}\r\n\t\t\t\t>\r\n\t\t\t\t\t{#each outputLines as { string, tag, colour }}\r\n\t\t\t\t\t\t<string style={colour ? `color: var(${colour})` : ''}>\r\n\t\t\t\t\t\t\t{tag == null ? string : `${tag}: ${string}`}\r\n\t\t\t\t\t\t</string>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t</container>\r\n\t\t\t</container>\r\n\t\t\t<container>\r\n\t\t\t\t<Input \r\n\t\t\t\t\tlabel='>>>'\r\n\t\t\t\t\tbackgroundColour='--colour-text-secondary'\r\n\t\t\t\t\tactiveBackgroundColour='--colour-text-primary'\r\n\t\t\t\t\ttextColour='--colour-background-primary'\r\n\t\t\t\t\tlabelColour='--colour-background-secondary'\r\n\t\t\t\t\tfloatingLabelIndent='--indent'\r\n\t\t\t\t\troundness='0'\r\n\t\t\t\t\tlet:submit\r\n\t\t\t\t\ton:submit={onSubmit}\r\n\t\t\t\t>\r\n\t\t\t\t\t<container\r\n\t\t\t\t\t\tslot='button'\r\n\t\t\t\t\t\tstyle='\r\n\t\t\t\t\t\t\tflex-shrink: 0;\r\n\t\t\t\t\t\t\tflex-grow: 0;\r\n\t\t\t\t\t\t'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\theight='100%'\r\n\t\t\t\t\t\t\twidth='100%'\r\n\t\t\t\t\t\t\troundness='0'\r\n\t\t\t\t\t\t\ton:click={submit}\r\n\t\t\t\t\t\t\ticon='arrow_forward'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</container>\r\n\t\t\t\t</Input>\r\n\t\t\t</container>\r\n\t\t</container>\r\n\t</Card>\r\n</component>\r\n\r\n<style>\r\n\tcomponent {\r\n\t\twidth: var(--width);\r\n\r\n\t\t/* padding: var(--padding); */\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\tcontainer.content {\r\n\t\t/* border-radius: var(--roundness); */\r\n\r\n\t\tdisplay: grid;\r\n\t\t/* grid-template-rows: min-content auto min-content; */\r\n\t\tgrid-template-rows: auto min-content;\r\n\r\n\t\tmin-height: var(--height);\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tcontainer.content string {\r\n\t\tcolor: var(--colour-background-secondary);\r\n\t\tline-height: 2em;\r\n\t\twhite-space: pre-wrap;\r\n\t}\r\n\r\n\tcontainer.output {\r\n\t\tpadding: var(--padding);\r\n\t}\r\n\r\n\tcontainer.bar {\r\n\t\theight: auto;\r\n\t\twidth: 100%;\r\n\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: flex-end;\r\n\t\talign-items: center;\r\n\r\n\t\t/* border-radius: var(--roundness) var(--roundness) 0 0; */\r\n\r\n\t\t/* background: var(--colour-text-secondary); */\r\n\t}\r\n\r\n\tcontainer.bar .title {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tuser-select: none;\r\n\t\tpadding: 0 24px;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}